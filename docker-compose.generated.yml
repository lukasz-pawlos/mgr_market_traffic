version: "3.8"

services:
  database:
    image: postgres:13
    environment:
      POSTGRES_DB: "gielda"
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "Password"
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d gielda"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - gielda_network

  logdatabase:
    image: postgres:13
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: Password
      POSTGRES_DB: gielda
    ports:
      - "5433:5432"
    volumes:
      - log_db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - gielda_network

  market_service:
    build:
      context: ./gielda
      dockerfile: Dockerfile.gielda
    depends_on:
      database:
        condition: service_healthy
      logdatabase:
        condition: service_healthy
    ports:
      - "3000:3000"
    environment:
      DB_TYPE: "postgres"
      DB_HOST: database
      DB_PORT: 5432
      DB_USERNAME: "postgres"
      DB_PASSWORD: "Password"
      DB_NAME: "gielda"
      DB_HOST2: logdatabase
      DB_PORT2: 5432
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/user/allusers || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - gielda_network

  trade_service_1:
    build:
      context: ./gielda
      dockerfile: Dockerfile.trade
    depends_on:
      market_service:
        condition: service_healthy
    environment:
      TRADE_ID: 1
      DB_TYPE: "postgres"
      DB_HOST: database
      DB_PORT: 5432
      DB_USERNAME: "postgres"
      DB_PASSWORD: "Password"
      DB_NAME: "gielda"
      DB_HOST2: logdatabase
      DB_PORT2: 5432
      COMPANIES_IDS: "1,2,3"
      NUM_OF_CACHE:  500
      CACHE_TIME: 4
      TRANSACTION_TIME: 100
    networks:
      - gielda_network

  trade_service_2:
    build:
      context: ./gielda
      dockerfile: Dockerfile.trade
    depends_on:
      market_service:
        condition: service_healthy
    environment:
      TRADE_ID: 2
      DB_TYPE: "postgres"
      DB_HOST: database
      DB_PORT: 5432
      DB_USERNAME: "postgres"
      DB_PASSWORD: "Password"
      DB_NAME: "gielda"
      DB_HOST2: logdatabase
      DB_PORT2: 5432
      COMPANIES_IDS: "4,5,6"
      NUM_OF_CACHE:  500
      CACHE_TIME: 4
      TRANSACTION_TIME: 100
    networks:
      - gielda_network

  trade_service_3:
    build:
      context: ./gielda
      dockerfile: Dockerfile.trade
    depends_on:
      market_service:
        condition: service_healthy
    environment:
      TRADE_ID: 3
      DB_TYPE: "postgres"
      DB_HOST: database
      DB_PORT: 5432
      DB_USERNAME: "postgres"
      DB_PASSWORD: "Password"
      DB_NAME: "gielda"
      DB_HOST2: logdatabase
      DB_PORT2: 5432
      COMPANIES_IDS: "7,8,9"
      NUM_OF_CACHE:  500
      CACHE_TIME: 4
      TRANSACTION_TIME: 100
    networks:
      - gielda_network

  trade_service_4:
    build:
      context: ./gielda
      dockerfile: Dockerfile.trade
    depends_on:
      market_service:
        condition: service_healthy
    environment:
      TRADE_ID: 4
      DB_TYPE: "postgres"
      DB_HOST: database
      DB_PORT: 5432
      DB_USERNAME: "postgres"
      DB_PASSWORD: "Password"
      DB_NAME: "gielda"
      DB_HOST2: logdatabase
      DB_PORT2: 5432
      COMPANIES_IDS: "10,11,12"
      NUM_OF_CACHE:  500
      CACHE_TIME: 4
      TRANSACTION_TIME: 100
    networks:
      - gielda_network

  traffic_service:
    build:
      context: ./traffic
      dockerfile: Dockerfile.traffic
    depends_on:
      market_service:
        condition: service_healthy
    environment:
      NUM_USERS: 200
      TRAFFIC_TIME_REQUEST: 500
      NUM_COMPANIES: "12"
      DB_TYPE: "postgres"
      DB_HOST: database
      DB_USERNAME: "postgres"
      DB_PASSWORD: "Password"
      DB_NAME: "gielda"
      DB_HOST2: logdatabase
      DB_PORT2: 5432
    ports:
      - "3001:3001"
    networks:
      - gielda_network


volumes:
  db_data:
  log_db_data:

networks:
  gielda_network:
    driver: bridge
